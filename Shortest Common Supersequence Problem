import java.util.HashMap;
import java.util.Map;
 
class Main
{
    // Function to find the length of the shortest common supersequence of
    // sequences `X[0…m-1]` and `Y[0…n-1]`
    public static int SCSLength(String X, String Y, int m, int n,
                                Map<String, Integer> lookup)
    {
        // if the end of either sequence is reached, return
        // the length of another sequence
        if (m == 0 || n == 0) {
            return n + m;
        }
 
        // construct a unique map key from dynamic elements of the input
        String key = m + "|" + n;
 
        // if the subproblem is seen for the first time, solve it and
        // store its result in a map
        if (!lookup.containsKey(key))
        {
            // if the last character of `X` and `Y` matches
            if (X.charAt(m - 1) == Y.charAt(n - 1)) {
                lookup.put(key, SCSLength(X, Y, m - 1, n - 1, lookup) + 1);
            }
            else {
                // otherwise, if the last character of `X` and `Y` don't match
                int min = Integer.min(SCSLength(X, Y, m, n - 1, lookup) + 1,
                                    SCSLength(X, Y, m - 1, n, lookup) + 1);
                lookup.put(key, min);
            }
        }
 
        // return the subproblem solution from the map
        return lookup.get(key);
    }
 
    public static void main(String[] args)
    {
        String X = "ABCBDAB", Y = "BDCABA";
 
        // create a map to store solutions to subproblems;
        // we can also use an array instead of a map
        Map<String, Integer> lookup = new HashMap<>();
 
        System.out.print("The length of the shortest common supersequence is "
                + SCSLength(X, Y, X.length(), Y.length(), lookup));
    }
}
