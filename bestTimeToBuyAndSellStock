public class bestTimeToBuyAndSellStock2 {
// driver code 
    public static void main(String[] args) {

        int[] Arr = {7, 1, 5, 3, 6, 4};
        System.out.println(maxProfit_start(Arr));

    }

    static int maxProfit_start(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][2];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        return maxprofit(0, 0, n, prices,dp);


    }
    //recursion 

    static int maxprofit(int ind, int buy, int n, int[] prices) {
        if (ind == n) return 0;

        int profit = 0;
        // we can by the stock
        if (buy == 0) {
            profit = Math.max(0 + maxprofit(ind + 1, 0, n, prices), maxprofit(ind + 1, 1, n, prices) - prices[ind]);
        }
        if (buy == 1) {
            // we can sell the stock
            profit = Math.max(0 + maxprofit(ind + 1, 1, n, prices), maxprofit(ind + 1, 0, n, prices) + prices[ind]);
        }
        return profit;
    }

    // memorazation 
    static int maxprofit(int ind, int buy, int n, int[] prices, int[][] dp) {
        if (ind == n) return 0;
        if (dp[ind][buy] != -1) return dp[ind][buy];

        int profit = 0;
        // we can by the stock
        if (buy == 0) {
            profit = Math.max(0 + maxprofit(ind + 1, 0, n, prices), maxprofit(ind + 1, 1, n, prices) - prices[ind]);
        }
        if (buy == 1) {
            // we can sell the stock
            profit = Math.max(0 + maxprofit(ind + 1, 1, n, prices), maxprofit(ind + 1, 0, n, prices) + prices[ind]);
        }
        return dp[ind][buy] = profit;
    }
}
// Tabulation 


 public int maxProfit(int[] prices){
        int n = prices.length;
        int dp[][] = new int[n+1][2];
        for (int row[]:dp){
            Arrays.fill(row,-1);
        }
        //base condation
        dp[n][0]  = dp[n][1] = 0;
        int profit = 0 ;
        for (int ind = n-1; ind >=0 ; ind--) {
            for (int buy = 0; buy <=1 ; buy++) {
                if (buy == 0){
                    // we can buy stock
                    profit = Math.max(0+dp[ind+1][0],dp[ind+1][1] -prices[ind]);
                }
                if (buy ==1 ){
                    profit = Math.max(0+dp[ind+1][1],dp[ind+1][0] +prices[ind]);
                }
                dp[ind][buy] = profit;

            }

        }
        return dp[0][0];
    }
