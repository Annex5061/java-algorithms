
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    public:
    void inorder(TreeNode* root,vector<int> &ans)
    {
        if(root==NULL)
        {
            return;
        }
        else
        {
            inorder(root->left,ans);
            ans.push_back(root->val);
            inorder(root->right,ans);
        }
    }
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        inorder(root,ans);
        return ans;
    }
};





class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        if(!root)
        {
            return ans;
        }
        else if(root->left==NULL&&root->right==NULL)
        {
            ans.push_back(root->val);
            return ans;
        }
        else
        {
            stack<TreeNode*> st;
            TreeNode* node = root;
             while(true)
              {
                 if(node!=NULL)
                  {
                    st.push(node);
                    node=node->left;
                  }
                 else
                  {
                    if(st.empty())
                    {
                       break;
                    }
                    else
                    {
                       node=st.top();
                       ans.push_back(node->val);
                       st.pop();
                       node = node->right;
                    }
                 }
              }
        return ans;
        }
    }
};